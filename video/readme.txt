Video processing system

A fairly standard system for loading and processing videos, built around the Python interface to OpenCV. It is a node system where you create nodes and set their parameters, inputs and outputs. A manager object then arranges for the data to flow through the nodes by evaluating the nodes in the correct order. I primarily use it to extract words from videos to feed to topic models, which is provided directly by the script record_words.py. Implementation is mostly pure python with scipy and opencv, but also includes some modules that have C code that they will compile and use, and even some use of OpenCL, for when speed really matters. Includes very basic visualisation support. There are many, many test scripts to figure out how to use the system from.

Of note is the background subtraction module, which is my own algorithm: 'Background Subtraction with Dirichlet Processes' by Tom SF Haines & Tao Xiang, ECCV 2012. My tests show it to be the best background subtraction algorithm available, at least at the time of writing. Saying that its shadow handling is poor and it does not compensate for camera shake.

If you are reading readme.txt then you can generate documentation by running make_doc.py


Contains the following files:

video.py - Imports everything; typically you just include this in your code.
manager.py - Contains the manger object, that arranges for the nodes to update in the correct order, and provides various convenience methods.
video_node.py - The video node interface that all of the provided nodes inherit from and implement.

black.py - Generates an entirely black video sequence.
read_cv.py - Uses OpenCV to read in an avi file.
read_cv_cam.py - Uses OpenCV to read from a webcam.
read_cv_is.py - Uses OpenCV to read in an image sequence as a video.
seq.py - Provides a sequence node that allows you to concatenate video files.
seq_make.py - Helper, that automatically generates a sequence node given a directory of numbered video files.
frame_crop.py - Adjusts the length of a video, by cutting frames from the beginning and/or end.
half.py - Halves the resolution of a video.
step_scale.py - Scales a video in integer scales.
reflect.py - Reflects a video; choice of x axis, y axis or both.

write_cv.py - Writes an avi file to disk.
write_frames_cv.py - Writes a video to disk as a sequence of images.
write_frame_cv.py - Writes a specified list of frames to disk as separate image files.
view_cv.py - Shows a video on the screen in a window. If the user sends a keyboard or mouse button press to this window it stops, which will typically stop everything.
view_pygame.py - Showsa  video to screen, fullscreen using pygame.

record.py - Provides a node that will save a video stream to disk.
play.py - Reads from disk the file generated by a Record node and acts as though it is the node that Play saved to disk.
remap.py - Remaps multiple input nodes to generate a specific set of outputs. Typically used with the Record node to decide exactly what is saved to disk.
play_words.py - A script that plays back the file generated by the record_words.py script.

deinterlace_ev.py - Overly complicated de-interlacing algorithm.
colour_bias.py - Converts the colour space to a luminance/chromaticity based one.
light_correct_ms.py - Corrects for variations in light source brightness using mean shift.
backsub_dp.py - The background subtraction code. (Support files = backsub_dp_c.c, backsub_dp_cl.c, backsub_dp_cl.cl)
opticalflow_lk.py - Lukas & Kanade optical flow algorithm.
five_word.py - Given optical flow and a foreground mask this generates the '5-words on a grid' features often used with topic models to analyse video.

clip_mask.py - Clips a mask in the sense of keeping it the same size but zeroing out all areas that are too close to the edge.
mask_flow.py - Applies a mask to an optical flow field, zeroing out areas outside the mask. Simple way of using background subtraction to clean up optical flow.
mask_from_colour.py - Generates masks from colour video based on exact colour matches.
mask_sabs.py - Converts the ground truth of the SABS background subtraction test to masks that can be used to analyse results.
mask_stats.py - Outputs assorted statistics comparing the difference between two masks, e.g. f-measure.

combine_grid.py - Given multiple video streams as input combines them using a grid layout into a single video.
render_difference.py - Renders the absolute difference between two input video streams, exaggerating it if requested.
render_flow.py - Renders an optical flow video to an rgb video.
render_mask.py - Renders a mask video to a colour video, including the ability to provide videos as the foreground and background.
render_word.py - Renders the words generated by FiveWord.

test_backsub_dp.py - Test the background subtraction algorithm.
test_cam_cv.py - Test reading from a webcam with OpenCV.
test_deinterlace_ev.py - Test deinterlacing.
test_five_word.py - Test the 5 word parsing of a video - a basic feature extraction techneque.
test_half.py - Test halfing the resolution of a video.
test_light_correct_ms.py - Test correcting for changes in lighting.
test_opticalflow_lk.py - Test the optical flow implimentation.
test_read_cv.py - Test reading from a file using OpenCV.
test_reflect.py - Test reflecting a video image.
test_view_cv.py - Test visualisation using the OpenCV window system.
test_write_cv.py - Test writting an .avi file with OpenCV.

record_words.py - A script that reads in a video file and converts it to the standard '5-words in a grid' feature set that is so often used when using topic models for behavioural analysis.
bgs.py - A script that when given a video file runs background subtraction and outputs a sequence of frames containing the generated foreground/background masks.
bgs_demo.py - A real time background subtraction from the webcam demo I was planning on running at ECCV 2012, except they refused to provide me with electricty.

readme.txt - This file, which is included in the html documentation.
make_doc.py - Builds the html documentation.

